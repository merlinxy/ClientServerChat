//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientServerChat.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChatServiceInbound", CallbackContract=typeof(ClientServerChat.ChatServiceReference.IChatServiceInboundCallback))]
    public interface IChatServiceInbound {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/GetData", ReplyAction="http://tempuri.org/IChatServiceInbound/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/GetData", ReplyAction="http://tempuri.org/IChatServiceInbound/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/JoinTheConversation", ReplyAction="http://tempuri.org/IChatServiceInbound/JoinTheConversationResponse")]
        int JoinTheConversation(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/JoinTheConversation", ReplyAction="http://tempuri.org/IChatServiceInbound/JoinTheConversationResponse")]
        System.Threading.Tasks.Task<int> JoinTheConversationAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServiceInbound/ReceiveMessage")]
        void ReceiveMessage(string userName, string[] addressList, string userMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServiceInbound/ReceiveMessage")]
        System.Threading.Tasks.Task ReceiveMessageAsync(string userName, string[] addressList, string userMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/LeaveTheConversation", ReplyAction="http://tempuri.org/IChatServiceInbound/LeaveTheConversationResponse")]
        int LeaveTheConversation(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServiceInbound/LeaveTheConversation", ReplyAction="http://tempuri.org/IChatServiceInbound/LeaveTheConversationResponse")]
        System.Threading.Tasks.Task<int> LeaveTheConversationAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceInboundCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServiceInbound/NotifyUserJoinedTheConversation")]
        void NotifyUserJoinedTheConversation(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServiceInbound/NotifyUserOfMessage")]
        void NotifyUserOfMessage(string userName, string userMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServiceInbound/NotifyUserLeftTheConversation")]
        void NotifyUserLeftTheConversation(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceInboundChannel : ClientServerChat.ChatServiceReference.IChatServiceInbound, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceInboundClient : System.ServiceModel.DuplexClientBase<ClientServerChat.ChatServiceReference.IChatServiceInbound>, ClientServerChat.ChatServiceReference.IChatServiceInbound {
        
        public ChatServiceInboundClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceInboundClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceInboundClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceInboundClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceInboundClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public int JoinTheConversation(string userName) {
            return base.Channel.JoinTheConversation(userName);
        }
        
        public System.Threading.Tasks.Task<int> JoinTheConversationAsync(string userName) {
            return base.Channel.JoinTheConversationAsync(userName);
        }
        
        public void ReceiveMessage(string userName, string[] addressList, string userMessage) {
            base.Channel.ReceiveMessage(userName, addressList, userMessage);
        }
        
        public System.Threading.Tasks.Task ReceiveMessageAsync(string userName, string[] addressList, string userMessage) {
            return base.Channel.ReceiveMessageAsync(userName, addressList, userMessage);
        }
        
        public int LeaveTheConversation(string userName) {
            return base.Channel.LeaveTheConversation(userName);
        }
        
        public System.Threading.Tasks.Task<int> LeaveTheConversationAsync(string userName) {
            return base.Channel.LeaveTheConversationAsync(userName);
        }
    }
}
